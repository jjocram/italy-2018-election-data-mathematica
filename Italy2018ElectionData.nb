(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    427942,       8508]
NotebookOptionsPosition[    425066,       8450]
NotebookOutlinePosition[    425593,       8469]
CellTagsIndexPosition[    425550,       8466]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"<<", " ", "Italy2018ElectionDataAnalysis.wl"}], ";"}]}], "Input",
 CellChangeTimes->{{3.829382146660511*^9, 3.829382160561987*^9}, 
   3.829383243802903*^9, {3.829383311646247*^9, 3.829383344551388*^9}, {
   3.829383387937789*^9, 3.829383442335832*^9}, {3.8299122669864917`*^9, 
   3.829912268009077*^9}, {3.829914563344532*^9, 3.8299145642948937`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"8d1a8825-42b2-4663-9e53-b0643a0d2112"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PieChart", "[", 
  RowBox[{
   RowBox[{"PlottingElectionElectorsPie", "[", 
    RowBox[{"\"\<CAMERA\>\"", ",", " ", 
     RowBox[{"region", "\[Rule]", " ", "\"\<MOLISE\>\""}]}], "]"}], ",", " ", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Votanti maschi\>\"", ",", " ", "\"\<Votanti femmine\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.829392841773822*^9, 3.8293928673432417`*^9}, {
  3.829395433038889*^9, 3.829395521401116*^9}, {3.8293997507156963`*^9, 
  3.829399752632517*^9}, {3.829664066668935*^9, 3.829664066758973*^9}, {
  3.829664367527709*^9, 3.829664409238834*^9}, {3.829665151783584*^9, 
  3.8296651643725758`*^9}, {3.829669123741973*^9, 3.829669134468062*^9}, {
  3.829904257833249*^9, 3.829904259661377*^9}, {3.829904310023641*^9, 
  3.8299043232594724`*^9}, {3.829912937667118*^9, 3.82991293839736*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"d7a8c431-630c-45af-85ce-8fbc6eafa9ee"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {}, 
     DynamicModuleBox[{
      DynamicChart`click$21266$21400 = False, DynamicChart`click$21277$21400 = 
       False}, {{
        Directive[
         RGBColor[0.5, 0.5, 1.], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.5]]]], {{{{{{}, {{
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.982864, 0.7431472, 0.3262672]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {0.08434187464695952, 
                    3.141592653589793}]}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 123643]& , TagBoxNote -> "123643"], 
                    StyleBox["123643", {}, StripOnInput -> False]], 
                   Annotation[#, 
                    Style[123643, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$21266$21400, 
                    FEPrivate`Not[DynamicChart`click$21266$21400]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$21266$21400, {{{1., 0.}, {0., 
                    1.}}, {-0.008431687810741478, 0.1998221875584946}}, {{1, 
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$21266$21400}]], 
                "DelayedClickEffect"]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.4992, 0.5552, 0.8309304]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-3.141592653589793, 
                    0.08434187464695952}]}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 130465]& , TagBoxNote -> "130465"], 
                    StyleBox["130465", {}, StripOnInput -> False]], 
                   Annotation[#, 
                    Style[130465, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$21277$21400, 
                    FEPrivate`Not[DynamicChart`click$21277$21400]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$21277$21400, {{{1., 0.}, {0., 1.}}, {
                    0.008431687810741502, -0.1998221875584946}}, {{1, 0}, {0, 
                   1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$21277$21400}]], 
                "DelayedClickEffect"]}}}}}, {}}, {{}}}}, {{{{
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                
                TagBox[{{}, {}}, StatusArea[#, 123643]& , TagBoxNote -> 
                 "123643"], 
                StyleBox["123643", {}, StripOnInput -> False]], Annotation[#, 
                Style[123643, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$21266$21400, 
                  FEPrivate`Not[DynamicChart`click$21266$21400]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$21266$21400, {{{1., 0.}, {0., 
                1.}}, {-0.008431687810741478, 0.1998221875584946}}, {{1, 0}, {
               0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$21266$21400}]], 
            "DelayedClickEffect"], 
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                
                TagBox[{{}, {}}, StatusArea[#, 130465]& , TagBoxNote -> 
                 "130465"], 
                StyleBox["130465", {}, StripOnInput -> False]], Annotation[#, 
                Style[130465, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$21277$21400, 
                  FEPrivate`Not[DynamicChart`click$21277$21400]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$21277$21400, {{{1., 0.}, {0., 1.}}, {
                0.008431687810741502, -0.1998221875584946}}, {{1, 0}, {0, 
               1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$21277$21400}]], 
            "DelayedClickEffect"]}, {}}}, {}}, {}, {}}, 
      DynamicModuleValues :> {}], {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, {
    DisplayFunction -> Identity, ContentSelectable -> False, GridLinesStyle -> 
     Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{-1., 1.}, {-1., 1.}}, 
     PlotRangePadding -> Scaled[0.09166666666666669]}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Votanti maschi\"", "\"Votanti femmine\""}, 
      "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.982864, 0.7431472, 0.3262672], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6552426666666666, 0.4954314666666667, 
                    0.21751146666666665`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.982864`", ",", "0.7431472`", ",", "0.3262672`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.982864, 0.7431472, 0.3262672]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.982864, 0.7431472, 0.3262672], Editable -> 
                    False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.4992, 0.5552, 0.8309304], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.3328, 0.37013333333333337`, 0.5539536], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.4992`", ",", "0.5552`", ",", "0.8309304`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.4992, 0.5552, 0.8309304]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.4992, 0.5552, 0.8309304], Editable -> False, 
                    Selectable -> False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"{", 
                 RowBox[{"None", ",", "None"}], "}"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.829392869140172*^9, 3.829394393529068*^9, 3.8293944607719707`*^9, 
   3.8293945457242193`*^9, 3.8293947392615*^9, 3.8293947879124203`*^9, 
   3.829394840138783*^9, 3.8293950292237663`*^9, 3.829395105087227*^9, 
   3.829395180078217*^9, 3.8293952474230213`*^9, 3.829395472560316*^9, 
   3.829395523219749*^9, 3.8293999053376207`*^9, {3.829664379699314*^9, 
   3.829664411126402*^9}, 3.829665165170726*^9, {3.82966522230803*^9, 
   3.829665250582513*^9}, {3.829665285633835*^9, 3.829665315433909*^9}, 
   3.829669135649067*^9, 3.829669377517007*^9, 3.8299042257212105`*^9, {
   3.829904313429881*^9, 3.8299043238063383`*^9}, 3.8299123424222317`*^9, 
   3.829912654488062*^9, 3.8299128199251404`*^9, 3.829912940331063*^9, 
   3.829912998615964*^9, 3.829913400203679*^9, 3.829913502997882*^9, 
   3.8299154274360743`*^9, 3.8299157890673747`*^9, 3.829980237163043*^9, 
   3.8299803551575813`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"4d7d0be0-aab9-46d4-9c44-b0dcce605fcc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PieChart", "[", 
  RowBox[{
   RowBox[{"PlottingElectionVotersPie", "[", 
    RowBox[{"\"\<camera\>\"", ",", " ", 
     RowBox[{"query", "->", "\"\<ELETTORI = 13746\>\""}]}], "]"}], ",", " ", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Votanti maschi\>\"", ",", " ", "\"\<Votanti femmine\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.829395533011074*^9, 3.829395533843975*^9}, {
  3.829395773827118*^9, 3.8293957787372227`*^9}, {3.829669198402493*^9, 
  3.829669200033732*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"12ecc51f-5245-402c-b360-ef9ef788b727"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {}, 
     DynamicModuleBox[{
      DynamicChart`click$21473$21537 = False, DynamicChart`click$21477$21537 = 
       False}, {{
        Directive[
         RGBColor[0.5, 0.5, 1.], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.5]]]], {{{{{{}, {{
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.982864, 0.7431472, 0.3262672]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {0.02489281052486403, 
                    3.141592653589793}]}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 5196]& , TagBoxNote -> "5196"], 
                    StyleBox["5196", {}, StripOnInput -> False]], 
                   Annotation[#, 
                    Style[5196, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$21473$21537, 
                    FEPrivate`Not[DynamicChart`click$21473$21537]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$21473$21537, {{{1., 0.}, {0., 
                    1.}}, {-0.002489216782649949, 0.19998450889958697`}}, {{1,
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$21473$21537}]], 
                "DelayedClickEffect"]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.4992, 0.5552, 0.8309304]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-3.141592653589793, 
                    0.02489281052486403}]}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 5279]& , TagBoxNote -> "5279"], 
                    StyleBox["5279", {}, StripOnInput -> False]], 
                   Annotation[#, 
                    Style[5279, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$21477$21537, 
                    FEPrivate`Not[DynamicChart`click$21477$21537]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$21477$21537, {{{1., 0.}, {0., 1.}}, {
                    0.0024892167826499733`, -0.19998450889958697`}}, {{1, 
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$21477$21537}]], 
                "DelayedClickEffect"]}}}}}, {}}, {{}}}}, {{{{
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 5196]& , TagBoxNote -> "5196"], 
                StyleBox["5196", {}, StripOnInput -> False]], Annotation[#, 
                Style[5196, {}], "Tooltip"]& ], 
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$21473$21537, 
                  FEPrivate`Not[DynamicChart`click$21473$21537]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$21473$21537, {{{1., 0.}, {0., 
                1.}}, {-0.002489216782649949, 0.19998450889958697`}}, {{1, 
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$21473$21537}]], 
            "DelayedClickEffect"], 
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 5279]& , TagBoxNote -> "5279"], 
                StyleBox["5279", {}, StripOnInput -> False]], Annotation[#, 
                Style[5279, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$21477$21537, 
                  FEPrivate`Not[DynamicChart`click$21477$21537]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$21477$21537, {{{1., 0.}, {0., 1.}}, {
                0.0024892167826499733`, -0.19998450889958697`}}, {{1, 0}, {0, 
               1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$21477$21537}]], 
            "DelayedClickEffect"]}, {}}}, {}}, {}, {}}, 
      DynamicModuleValues :> {}], {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, {
    DisplayFunction -> Identity, ContentSelectable -> False, GridLinesStyle -> 
     Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{-1., 1.}, {-1., 1.}}, 
     PlotRangePadding -> Scaled[0.09166666666666669]}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Votanti maschi\"", "\"Votanti femmine\""}, 
      "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.982864, 0.7431472, 0.3262672], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6552426666666666, 0.4954314666666667, 
                    0.21751146666666665`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.982864`", ",", "0.7431472`", ",", "0.3262672`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.982864, 0.7431472, 0.3262672]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.982864, 0.7431472, 0.3262672], Editable -> 
                    False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.4992, 0.5552, 0.8309304], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.3328, 0.37013333333333337`, 0.5539536], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.4992`", ",", "0.5552`", ",", "0.8309304`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.4992, 0.5552, 0.8309304]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.4992, 0.5552, 0.8309304], Editable -> False, 
                    Selectable -> False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"{", 
                 RowBox[{"None", ",", "None"}], "}"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.829395536214258*^9, 3.829395633405549*^9, 
  3.829669201235814*^9, 3.829669379671892*^9, 3.8299042260337067`*^9, 
  3.8299136702214556`*^9, 3.8299154277570868`*^9, 3.829915788694378*^9, 
  3.829980240079465*^9, 3.829980355458469*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"91bc5b9b-01fb-4281-b26a-5131ac051aa2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PieChart", "[", 
  RowBox[{
   RowBox[{"PlottingElectionVotersNonVotersPie", "[", "\"\<camera\>\"", "]"}],
    ",", " ", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Votanti maschi\>\"", ",", " ", "\"\<Votanti femmine\>\"", ",", " ", 
      "\"\<Non votanti maschi\>\"", ",", " ", "\"\<Non votanti femmine\>\""}],
      "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8293957560824547`*^9, 3.8293957961442127`*^9}, {
  3.8296692062999268`*^9, 3.829669222139537*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"08e8659e-aa84-4fae-95ee-9d4f802ba7f4"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {}, 
     DynamicModuleBox[{
      DynamicChart`click$21600$21686 = False, DynamicChart`click$21604$21686 = 
       False, DynamicChart`click$21608$21686 = False, 
       DynamicChart`click$21612$21686 = False}, {{
        Directive[
         RGBColor[0.5, 0.5, 1.], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.5]]]], {{{{{{}, {{
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.982864, 0.7431472, 0.3262672]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {0.8378491477908718, 
                    3.141592653589793}]}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 15337752]& , TagBoxNote -> "15337752"], 
                    StyleBox["15337752", {}, StripOnInput -> False]], 
                   Annotation[#, 
                    Style[15337752, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$21600$21686, 
                    FEPrivate`Not[DynamicChart`click$21600$21686]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$21600$21686, {{{1., 0.}, {0., 
                    1.}}, {-0.08135565155415364, 0.18270538569018469`}}, {{1, 
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$21600$21686}]], 
                "DelayedClickEffect"]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.928, 0.5210666666666667, 0.2]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-1.45887427032023, 
                    0.8378491477908718}]}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 15291014]& , TagBoxNote -> "15291014"], 
                    StyleBox["15291014", {}, StripOnInput -> False]], 
                   Annotation[#, 
                    Style[15291014, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$21604$21686, 
                    FEPrivate`Not[DynamicChart`click$21604$21686]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$21604$21686, {{{1., 0.}, {0., 1.}}, {
                    0.1904354167107961, -0.06110934512973806}}, {{1, 0}, {0, 
                   1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$21604$21686}]], 
                "DelayedClickEffect"]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.7116405333333333, 0.4816, 0.5483194666666666]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.1894519932436083`, -1.45887427032023}]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 4864005]& , 
                    TagBoxNote -> "4864005"], 
                    StyleBox["4864005", {}, StripOnInput -> False]], 
                   Annotation[#, 
                    Style[4864005, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$21608$21686, 
                    FEPrivate`Not[DynamicChart`click$21608$21686]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$21608$21686, {{{1., 0.}, {0., 
                    1.}}, {-0.05013293801157934, -0.1936147941824879}}, {{1, 
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$21608$21686}]], 
                "DelayedClickEffect"]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.4992, 0.5552, 0.8309304]], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -2.1894519932436083`}]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 6339116]& , 
                    TagBoxNote -> "6339116"], 
                    StyleBox["6339116", {}, StripOnInput -> False]], 
                   Annotation[#, 
                    Style[6339116, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$21612$21686, 
                    FEPrivate`Not[DynamicChart`click$21612$21686]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$21612$21686, {{{1., 0.}, {0., 
                    1.}}, {-0.17776054183750162`, -0.09165800437298341}}, {{1,
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$21612$21686}]], 
                "DelayedClickEffect"]}}}}}, {}}, {{}}}}, {{{{
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                
                TagBox[{{}, {}}, StatusArea[#, 15337752]& , TagBoxNote -> 
                 "15337752"], 
                StyleBox["15337752", {}, StripOnInput -> False]], 
               Annotation[#, 
                Style[15337752, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$21600$21686, 
                  FEPrivate`Not[DynamicChart`click$21600$21686]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$21600$21686, {{{1., 0.}, {0., 
                1.}}, {-0.08135565155415364, 0.18270538569018469`}}, {{1, 
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$21600$21686}]], 
            "DelayedClickEffect"], 
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                
                TagBox[{{}, {}}, StatusArea[#, 15291014]& , TagBoxNote -> 
                 "15291014"], 
                StyleBox["15291014", {}, StripOnInput -> False]], 
               Annotation[#, 
                Style[15291014, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$21604$21686, 
                  FEPrivate`Not[DynamicChart`click$21604$21686]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$21604$21686, {{{1., 0.}, {0., 1.}}, {
                0.1904354167107961, -0.06110934512973806}}, {{1, 0}, {0, 
               1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$21604$21686}]], 
            "DelayedClickEffect"], 
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                
                TagBox[{{}, {}}, StatusArea[#, 4864005]& , TagBoxNote -> 
                 "4864005"], 
                StyleBox["4864005", {}, StripOnInput -> False]], Annotation[#, 
                Style[4864005, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$21608$21686, 
                  FEPrivate`Not[DynamicChart`click$21608$21686]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$21608$21686, {{{1., 0.}, {0., 
                1.}}, {-0.05013293801157934, -0.1936147941824879}}, {{1, 0}, {
               0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$21608$21686}]], 
            "DelayedClickEffect"], 
           TagBox[
            GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[{{}, {}}, StatusArea[#, 6339116]& , TagBoxNote -> 
                 "6339116"], 
                StyleBox["6339116", {}, StripOnInput -> False]], Annotation[#, 
                Style[6339116, {}], "Tooltip"]& ], 
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$21612$21686, 
                  FEPrivate`Not[DynamicChart`click$21612$21686]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], 
             Dynamic[
              FEPrivate`If[
              DynamicChart`click$21612$21686, {{{1., 0.}, {0., 
                1.}}, {-0.17776054183750162`, -0.09165800437298341}}, {{1, 
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$21612$21686}]], 
            "DelayedClickEffect"]}, {}}}, {}}, {}, {}}, 
      DynamicModuleValues :> {}], {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, {
    DisplayFunction -> Identity, ContentSelectable -> False, GridLinesStyle -> 
     Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{-1., 1.}, {-1., 1.}}, 
     PlotRangePadding -> Scaled[0.09166666666666669]}], 
   FormBox[
    FormBox[
     TemplateBox[{
      "\"Votanti maschi\"", "\"Votanti femmine\"", "\"Non votanti maschi\"", 
       "\"Non votanti femmine\""}, "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.928, 0.5210666666666667, 0.2]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.7116405333333333, 0.4816, 0.5483194666666666]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.982864, 0.7431472, 0.3262672], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6552426666666666, 0.4954314666666667, 
                    0.21751146666666665`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.982864`", ",", "0.7431472`", ",", "0.3262672`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.982864, 0.7431472, 0.3262672]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.982864, 0.7431472, 0.3262672], Editable -> 
                    False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.928, 0.5210666666666667, 0.2], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6186666666666667, 0.3473777777777778, 
                    0.13333333333333336`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.928`", ",", "0.5210666666666667`", ",", "0.2`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.928, 0.5210666666666667, 0.2]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.928, 0.5210666666666667, 0.2], Editable -> 
                    False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.7116405333333333, 0.4816, 0.5483194666666666], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.4744270222222222, 0.32106666666666667`, 
                    0.36554631111111113`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.7116405333333333`", ",", "0.4816`", ",", 
                    "0.5483194666666666`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.7116405333333333, 0.4816, 0.5483194666666666]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.7116405333333333, 0.4816, 0.5483194666666666], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.4992, 0.5552, 0.8309304], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.3328, 0.37013333333333337`, 0.5539536], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.4992`", ",", "0.5552`", ",", "0.8309304`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.4992, 0.5552, 0.8309304]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.4992, 0.5552, 0.8309304], Editable -> False, 
                    Selectable -> False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"{", 
                 RowBox[{"None", ",", "None", ",", "None", ",", "None"}], 
                 "}"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.829395799371271*^9, {3.829669218795046*^9, 3.829669223126233*^9}, 
   3.8296693824754477`*^9, 3.8299042264712095`*^9, 3.829913672841178*^9, 
   3.8299154280730915`*^9, 3.82991578831738*^9, 3.8299802423811207`*^9, 
   3.829980355906516*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"548a94da-c56d-4c3c-9355-ed4c9f5abbfd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"divisions", "=", 
   RowBox[{"EntityValue", "[", 
    RowBox[{
     RowBox[{"Entity", "[", 
      RowBox[{"\"\<AdministrativeDivision\>\"", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"EntityProperty", "[", 
          RowBox[{
          "\"\<AdministrativeDivision\>\"", ",", "\"\<ParentRegion\>\""}], 
          "]"}], "\[Rule]", 
         RowBox[{"Entity", "[", 
          RowBox[{"\"\<Country\>\"", ",", "\"\<Italy\>\""}], "]"}]}], "}"}]}],
       "]"}], ",", "\"\<Entities\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"divisionsVotes", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Transpose", " ", "@", " ", 
      RowBox[{"{", 
       RowBox[{"divisions", ",", " ", 
        RowBox[{"PlottingElectionRegionCoalitionsBars", "[", 
         RowBox[{"\"\<camera\>\"", ",", " ", "coalition"}], "]"}]}], " ", 
       "}"}]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"coalition", ",", " ", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Sinistra\>\"", ",", " ", "\"\<Centro\>\"", ",", " ", 
         "\"\<Destra\>\""}], "}"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"GeoRegionValuePlot", "[", 
  RowBox[{"Table", "[", 
   RowBox[{"rv", ",", " ", 
    RowBox[{"{", 
     RowBox[{"rv", ",", "  ", "divisionsVotes"}], "}"}]}], "]"}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.8296660287441473`*^9, 3.829666044518959*^9}, {
  3.829667892263022*^9, 3.829668093556335*^9}, {3.829668294627674*^9, 
  3.829668381547062*^9}, {3.829668433613667*^9, 3.82966849868678*^9}, {
  3.829668648432805*^9, 3.829668736016081*^9}, {3.829668830263945*^9, 
  3.82966888495072*^9}, {3.8296689190334663`*^9, 3.829668958508835*^9}, {
  3.8296689935636272`*^9, 3.829669017302329*^9}, {3.8296694629802723`*^9, 
  3.829669525041649*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"3723de93-b25b-4dc5-9298-e670f78bb1e5"],

Cell[BoxData[
 TemplateBox[{
  "GeoRegionValuePlot", "ldata", 
   "\"\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", RowBox[{RowBox[{\
\\\"{\\\", RowBox[{TemplateBox[List[\\\"\\\\\\\"Abruzzes, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Abruzzes\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Abruzzes\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"567410\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Apulia, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Apulia\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Apulia\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"271975\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Basilicata, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Basilicata\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Basilicata\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"683616\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Calabria, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Calabria\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Calabria\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"2111329\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Campania, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Campania\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Campania\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"3265739\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Emilia\\\\[Hyphen]Romagna, Italy\\\\\\\"\
\\\", RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"EmiliaRomagna\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"EmiliaRomagna\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Italy\\\\\\\\\
\\\\\\\"}]\\\\\\\"\\\", \\\"\\\\\\\"administrative division\\\\\\\"\\\"], \
\\\"Entity\\\"], \\\",\\\", \\\"677301\\\"}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Friuli\\\\[Hyphen]Venezia Giulia, \
Italy\\\\\\\"\\\", RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", \
RowBox[List[\\\"\\\\\\\"FriuliVeneziaGiulia\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"FriuliVeneziaGiulia\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Italy\\\
\\\\\\\\\\\\\"}]\\\\\\\"\\\", \\\"\\\\\\\"administrative \
division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \\\"2998477\\\"}], \\\"}\\\
\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Lazio, Italy\\\\\\\"\\\", RowBox[List[\\\
\"Entity\\\", \\\"[\\\", RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\
\"\\\", \\\",\\\", RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Lazio\\\\\\\
\"\\\", \\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \
\\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Lazio\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"882054\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Liguria, Italy\\\\\\\"\\\", RowBox[List[\
\\\"Entity\\\", \\\"[\\\", RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\
\\\"\\\", \\\",\\\", RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Liguria\\\
\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \
\\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Liguria\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\
\"}]\\\\\\\"\\\", \\\"\\\\\\\"administrative division\\\\\\\"\\\"], \
\\\"Entity\\\"], \\\",\\\", \\\"5887437\\\"}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{TemplateBox[List[\\\"\\\\\\\"Lombardy, Italy\\\\\\\
\"\\\", RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Lombardy\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Lombardy\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"900646\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\
\"10\\\", \\\"\[RightSkeleton]\\\"}]}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\
\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Abruzzes, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Abruzzes\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Abruzzes\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"303006\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Apulia, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Apulia\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Apulia\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"139158\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Basilicata, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Basilicata\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Basilicata\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"406684\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Calabria, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Calabria\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Calabria\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"1490313\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Campania, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Campania\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Campania\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"704468\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Emilia\\\\[Hyphen]Romagna, Italy\\\\\\\"\
\\\", RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"EmiliaRomagna\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"EmiliaRomagna\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Italy\\\\\\\\\
\\\\\\\"}]\\\\\\\"\\\", \\\"\\\\\\\"administrative division\\\\\\\"\\\"], \
\\\"Entity\\\"], \\\",\\\", \\\"169299\\\"}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Friuli\\\\[Hyphen]Venezia Giulia, \
Italy\\\\\\\"\\\", RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", \
RowBox[List[\\\"\\\\\\\"FriuliVeneziaGiulia\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"FriuliVeneziaGiulia\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Italy\\\
\\\\\\\\\\\\\"}]\\\\\\\"\\\", \\\"\\\\\\\"administrative \
division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \\\"1025578\\\"}], \\\"}\\\
\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Lazio, Italy\\\\\\\"\\\", RowBox[List[\\\
\"Entity\\\", \\\"[\\\", RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\
\"\\\", \\\",\\\", RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Lazio\\\\\\\
\"\\\", \\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \
\\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Lazio\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"259950\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Liguria, Italy\\\\\\\"\\\", RowBox[List[\
\\\"Entity\\\", \\\"[\\\", RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\
\\\"\\\", \\\",\\\", RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Liguria\\\
\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \
\\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Liguria\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\
\"}]\\\\\\\"\\\", \\\"\\\\\\\"administrative division\\\\\\\"\\\"], \
\\\"Entity\\\"], \\\",\\\", \\\"1200482\\\"}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{TemplateBox[List[\\\"\\\\\\\"Lombardy, Italy\\\\\\\
\"\\\", RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Lombardy\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Lombardy\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"316417\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\
\"10\\\", \\\"\[RightSkeleton]\\\"}]}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\
\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Abruzzes, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Abruzzes\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Abruzzes\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"1089463\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Apulia, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Apulia\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Apulia\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"322011\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Basilicata, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Basilicata\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Basilicata\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"1220949\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Calabria, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Calabria\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Calabria\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"3367505\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Campania, Italy\\\\\\\"\\\", \
RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Campania\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Campania\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"3381482\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Emilia\\\\[Hyphen]Romagna, Italy\\\\\\\"\
\\\", RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"EmiliaRomagna\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"EmiliaRomagna\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Italy\\\\\\\\\
\\\\\\\"}]\\\\\\\"\\\", \\\"\\\\\\\"administrative division\\\\\\\"\\\"], \
\\\"Entity\\\"], \\\",\\\", \\\"1197222\\\"}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Friuli\\\\[Hyphen]Venezia Giulia, \
Italy\\\\\\\"\\\", RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", \
RowBox[List[\\\"\\\\\\\"FriuliVeneziaGiulia\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"FriuliVeneziaGiulia\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Italy\\\
\\\\\\\\\\\\\"}]\\\\\\\"\\\", \\\"\\\\\\\"administrative \
division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \\\"4407349\\\"}], \\\"}\\\
\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Lazio, Italy\\\\\\\"\\\", RowBox[List[\\\
\"Entity\\\", \\\"[\\\", RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\
\"\\\", \\\",\\\", RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Lazio\\\\\\\
\"\\\", \\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \
\\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Lazio\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"1286912\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{TemplateBox[List[\\\"\\\\\\\"Liguria, Italy\\\\\\\"\\\", RowBox[List[\
\\\"Entity\\\", \\\"[\\\", RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\
\\\"\\\", \\\",\\\", RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Liguria\\\
\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \
\\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Liguria\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\
\"}]\\\\\\\"\\\", \\\"\\\\\\\"administrative division\\\\\\\"\\\"], \
\\\"Entity\\\"], \\\",\\\", \\\"10552680\\\"}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{TemplateBox[List[\\\"\\\\\\\"Lombardy, Italy\\\\\\\
\"\\\", RowBox[List[\\\"Entity\\\", \\\"[\\\", \
RowBox[List[\\\"\\\\\\\"AdministrativeDivision\\\\\\\"\\\", \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[\\\"\\\\\\\"Lombardy\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"Italy\\\\\\\"\\\"]], \\\"}\\\"]]]], \\\"]\\\"]], \
\\\"\\\\\\\"Entity[\\\\\\\\\\\\\\\"AdministrativeDivision\\\\\\\\\\\\\\\", \
{\\\\\\\\\\\\\\\"Lombardy\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"Italy\\\\\\\\\\\\\\\"}]\\\\\\\"\\\", \
\\\"\\\\\\\"administrative division\\\\\\\"\\\"], \\\"Entity\\\"], \\\",\\\", \
\\\"1184178\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \
\\\"10\\\", \\\"\[RightSkeleton]\\\"}]}], \\\"}\\\"}]}], \\\"}\\\"}]\\) is \
not a valid dataset or list of datasets.\"", 2, 8, 1, 16851644146934843526, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8299804086842194`*^9},
 CellLabel->
  "During evaluation of \
In[6]:=",ExpressionUUID->"d129f41e-4dfa-4d7c-b612-46d93e241800"],

Cell[BoxData[
 RowBox[{"GeoRegionValuePlot", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Abruzzes, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Abruzzes\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Abruzzes\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "567410"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Apulia, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Apulia\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Apulia\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "271975"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Basilicata, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Basilicata\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Basilicata\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "683616"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Calabria, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Calabria\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Calabria\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "2111329"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Campania, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Campania\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Campania\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "3265739"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Emilia\[Hyphen]Romagna, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"EmiliaRomagna\"", ",", "\"Italy\""}], "}"}]}], 
            "]"}], "\"Entity[\\\"AdministrativeDivision\\\", \
{\\\"EmiliaRomagna\\\", \\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "677301"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Friuli\[Hyphen]Venezia Giulia, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"FriuliVeneziaGiulia\"", ",", "\"Italy\""}], 
                "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", \
{\\\"FriuliVeneziaGiulia\\\", \\\"Italy\\\"}]\"", 
          "\"administrative division\""},
         "Entity"], ",", "2998477"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Lazio, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Lazio\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Lazio\\\", \\\"Italy\
\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "882054"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Liguria, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Liguria\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Liguria\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "5887437"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Lombardy, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Lombardy\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Lombardy\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "900646"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Marche, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Marche\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Marche\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "131785"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Molise, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Molise\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Molise\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "2619753"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Piemonte, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Piemonte\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Piemonte\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "1510688"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Sardegna, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Sardegna\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Sardegna\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "652335"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Sicily, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Sicily\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Sicily\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "1410328"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Toscana, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Toscana\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Toscana\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "3014009"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Trentino\[Hyphen]Alto Adige, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"TrentinoAltoAdige\"", ",", "\"Italy\""}], "}"}]}], 
            "]"}], "\"Entity[\\\"AdministrativeDivision\\\", \
{\\\"TrentinoAltoAdige\\\", \\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Umbria, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Umbria\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Umbria\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "586538"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Valle d'Aosta, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"ValleDAosta\"", ",", "\"Italy\""}], "}"}]}], "]"}],
           "\"Entity[\\\"AdministrativeDivision\\\", {\\\"ValleDAosta\\\", \\\
\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Veneto, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Veneto\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Veneto\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "2430617"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Abruzzes, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Abruzzes\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Abruzzes\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "303006"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Apulia, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Apulia\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Apulia\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "139158"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Basilicata, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Basilicata\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Basilicata\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "406684"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Calabria, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Calabria\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Calabria\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "1490313"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Campania, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Campania\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Campania\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "704468"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Emilia\[Hyphen]Romagna, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"EmiliaRomagna\"", ",", "\"Italy\""}], "}"}]}], 
            "]"}], "\"Entity[\\\"AdministrativeDivision\\\", \
{\\\"EmiliaRomagna\\\", \\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "169299"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Friuli\[Hyphen]Venezia Giulia, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"FriuliVeneziaGiulia\"", ",", "\"Italy\""}], 
                "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", \
{\\\"FriuliVeneziaGiulia\\\", \\\"Italy\\\"}]\"", 
          "\"administrative division\""},
         "Entity"], ",", "1025578"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Lazio, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Lazio\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Lazio\\\", \\\"Italy\
\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "259950"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Liguria, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Liguria\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Liguria\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "1200482"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Lombardy, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Lombardy\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Lombardy\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "316417"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Marche, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Marche\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Marche\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "78192"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Molise, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Molise\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Molise\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "648740"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Piemonte, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Piemonte\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Piemonte\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "984338"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Sardegna, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Sardegna\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Sardegna\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "369196"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Sicily, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Sicily\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Sicily\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "1181357"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Toscana, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Toscana\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Toscana\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "527013"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Trentino\[Hyphen]Alto Adige, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"TrentinoAltoAdige\"", ",", "\"Italy\""}], "}"}]}], 
            "]"}], "\"Entity[\\\"AdministrativeDivision\\\", \
{\\\"TrentinoAltoAdige\\\", \\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Umbria, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Umbria\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Umbria\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "141498"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Valle d'Aosta, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"ValleDAosta\"", ",", "\"Italy\""}], "}"}]}], "]"}],
           "\"Entity[\\\"AdministrativeDivision\\\", {\\\"ValleDAosta\\\", \\\
\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Veneto, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Veneto\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Veneto\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "696676"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Abruzzes, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Abruzzes\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Abruzzes\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "1089463"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Apulia, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Apulia\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Apulia\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "322011"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Basilicata, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Basilicata\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Basilicata\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "1220949"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Calabria, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Calabria\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Calabria\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "3367505"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Campania, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Campania\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Campania\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "3381482"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Emilia\[Hyphen]Romagna, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"EmiliaRomagna\"", ",", "\"Italy\""}], "}"}]}], 
            "]"}], "\"Entity[\\\"AdministrativeDivision\\\", \
{\\\"EmiliaRomagna\\\", \\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "1197222"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Friuli\[Hyphen]Venezia Giulia, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"FriuliVeneziaGiulia\"", ",", "\"Italy\""}], 
                "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", \
{\\\"FriuliVeneziaGiulia\\\", \\\"Italy\\\"}]\"", 
          "\"administrative division\""},
         "Entity"], ",", "4407349"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Lazio, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Lazio\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Lazio\\\", \\\"Italy\
\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "1286912"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Liguria, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Liguria\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Liguria\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "10552680"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Lombardy, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Lombardy\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Lombardy\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "1184178"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Marche, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Marche\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Marche\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "208793"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Molise, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Molise\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Molise\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "4017626"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Piemonte, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Piemonte\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Piemonte\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "2828050"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Sardegna, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Sardegna\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Sardegna\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "1085221"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Sicily, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Sicily\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Sicily\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "3075167"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Toscana, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Toscana\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Toscana\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "2756419"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Trentino\[Hyphen]Alto Adige, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"TrentinoAltoAdige\"", ",", "\"Italy\""}], "}"}]}], 
            "]"}], "\"Entity[\\\"AdministrativeDivision\\\", \
{\\\"TrentinoAltoAdige\\\", \\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Umbria, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Umbria\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Umbria\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "758537"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Valle d'Aosta, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"ValleDAosta\"", ",", "\"Italy\""}], "}"}]}], "]"}],
           "\"Entity[\\\"AdministrativeDivision\\\", {\\\"ValleDAosta\\\", \\\
\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Veneto, Italy\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"AdministrativeDivision\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Veneto\"", ",", "\"Italy\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Veneto\\\", \
\\\"Italy\\\"}]\"", "\"administrative division\""},
         "Entity"], ",", "5536512"}], "}"}]}], "}"}]}], "}"}], 
  "]"}]], "Output",
 CellChangeTimes->{3.8299804088248415`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"3de6d058-10ee-452d-82f8-1f7eba26026a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"PlottingElectionRegionCoalitionsBars", "[", 
    RowBox[{"\"\<camera\>\"", ",", " ", "\"\<Centro\>\""}], "]"}], ",", " ", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"GetRegions", "[", "]"}]}], ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", " ", 
   RowBox[{"ChartStyle", "\[Rule]", "\"\<DarkRainbow\>\""}]}], "]"}]], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"cddb242c-561a-4833-981a-279018e61cef"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      Opacity[0], 
      PointBox[{{0.160136359713472, 0.}, {20.442176577198584`, 0.}}]}, {{}, {
       Directive[
        EdgeForm[
         Directive[
          Thickness[Small], 
          Opacity[0.5599999999999999]]], 
        RGBColor[0.982864, 0.7431472, 0.3262672]], {{
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[0.237736, 0.340215, 0.575113]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5578234228014154, 0.}, {1.4421765771985846`, 
                303006.}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 303006]& , TagBoxNote -> 
            "303006"], 
           StyleBox["303006", {}, StripOnInput -> False]], Annotation[#, 
           Style[303006, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.24611231578947368`, 0.34267710526315787`, 0.5661856315789473]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5578234228014154`, 0.}, {2.442176577198585, 
                139158.}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 139158]& , TagBoxNote -> 
            "139158"], 
           StyleBox["139158", {}, StripOnInput -> False]], Annotation[#, 
           Style[139158, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.254218052631579, 0.34900515789473685`, 0.5490325263157895]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5578234228014156`, 0.}, {3.442176577198585, 
                406684.}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 406684]& , TagBoxNote -> 
            "406684"], 
           StyleBox["406684", {}, StripOnInput -> False]], Annotation[#, 
           Style[406684, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.25988857894736844`, 0.39012673684210525`, 0.4578477894736842]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5578234228014156`, 0.}, {4.442176577198585, 
                1.490313*^6}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 1490313]& , TagBoxNote -> 
            "1490313"], 
           StyleBox["1490313", {}, StripOnInput -> False]], Annotation[#, 
           Style[1490313, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.26727173684210526`, 0.42872357894736846`, 0.37295378947368424`]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.557823422801415, 0.}, {5.442176577198584, 
                704468.}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 704468]& , TagBoxNote -> 
            "704468"], 
           StyleBox["704468", {}, StripOnInput -> False]], Annotation[#, 
           Style[704468, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.2815054210526316, 0.4572214736842105, 0.3132227368421053]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.557823422801414, 0.}, {6.442176577198584, 
                169299.}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 169299]& , TagBoxNote -> 
            "169299"], 
           StyleBox["169299", {}, StripOnInput -> False]], Annotation[#, 
           Style[169299, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.31119399999999997`, 0.48951342105263157`, 0.26673873684210525`]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.557823422801414, 0.}, {7.442176577198584, 
                1.025578*^6}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 1025578]& , TagBoxNote -> 
            "1025578"], 
           StyleBox["1025578", {}, StripOnInput -> False]], Annotation[#, 
           Style[1025578, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[0.376944, 0.5306581578947368, 0.2511645263157895]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.557823422801414, 0.}, {8.442176577198584, 
                259950.}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 259950]& , TagBoxNote -> 
            "259950"], 
           StyleBox["259950", {}, StripOnInput -> False]], Annotation[#, 
           Style[259950, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.46028284210526316`, 0.580178052631579, 0.24655178947368422`]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{8.557823422801414, 0.}, {9.442176577198584, 
                1.200482*^6}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 1200482]& , TagBoxNote -> 
            "1200482"], 
           StyleBox["1200482", {}, StripOnInput -> False]], Annotation[#, 
           Style[1200482, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.570004947368421, 0.6422606842105263, 0.2583812631578947]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{9.557823422801414, 0.}, {10.442176577198584`, 
                316417.}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 316417]& , TagBoxNote -> 
            "316417"], 
           StyleBox["316417", {}, StripOnInput -> False]], Annotation[#, 
           Style[316417, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.6743836315789474, 0.6977730526315788, 0.2746017894736842]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{10.557823422801414`, 0.}, {11.442176577198584`, 
                78192.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"],
             StatusArea[#, 78192]& , TagBoxNote -> "78192"], 
           StyleBox["78192", {}, StripOnInput -> False]], Annotation[#, 
           Style[78192, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.7734188947368421, 0.7467151578947369, 0.2952133684210526]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{11.557823422801414`, 0.}, {12.442176577198584`, 
                648740.}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 648740]& , TagBoxNote -> 
            "648740"], 
           StyleBox["648740", {}, StripOnInput -> False]], Annotation[#, 
           Style[648740, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.8335094210526316, 0.7551613684210526, 0.3108594736842105]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{12.557823422801414`, 0.}, {13.442176577198584`, 
                984338.}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 984338]& , TagBoxNote -> 
            "984338"], 
           StyleBox["984338", {}, StripOnInput -> False]], Annotation[#, 
           Style[984338, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.8676367894736842, 0.7366103157894737, 0.32319526315789476`]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{13.557823422801414`, 0.}, {14.442176577198584`, 
                369196.}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 369196]& , TagBoxNote -> 
            "369196"], 
           StyleBox["369196", {}, StripOnInput -> False]], Annotation[#, 
           Style[369196, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.8539025789473684, 0.6528104210526315, 0.3182613157894737]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{14.557823422801414`, 0.}, {15.442176577198584`, 
                1.181357*^6}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 1181357]& , TagBoxNote -> 
            "1181357"], 
           StyleBox["1181357", {}, StripOnInput -> False]], Annotation[#, 
           Style[1181357, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.8196562631578946, 0.5410467368421052, 0.3059260526315789]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{15.557823422801414`, 0.}, {16.442176577198584`, 
                527013.}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 527013]& , TagBoxNote -> 
            "527013"], 
           StyleBox["527013", {}, StripOnInput -> False]], Annotation[#, 
           Style[527013, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.7778861578947368, 0.4010961052631579, 0.2729335263157895]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{16.557823422801416`, 0.}, {17.442176577198584`, 
                0.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
            StatusArea[#, 0]& , TagBoxNote -> "0"], 
           StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
           Style[0, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[
          0.7342351052631579, 0.2540987368421053, 0.23477668421052633`]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{17.557823422801416`, 0.}, {18.442176577198584`, 
                141498.}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 141498]& , TagBoxNote -> 
            "141498"], 
           StyleBox["141498", {}, StripOnInput -> False]], Annotation[#, 
           Style[141498, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[0.72987, 0.239399, 0.230961]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{18.557823422801416`, 0.}, {19.442176577198584`, 
                0.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
            StatusArea[#, 0]& , TagBoxNote -> "0"], 
           StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
           Style[0, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.5599999999999999]]], 
          RGBColor[0.72987, 0.239399, 0.230961]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{19.557823422801416`, 0.}, {20.442176577198584`, 
                696676.}, "RoundingRadius" -> 0]}], 
             "DelayedMouseEffectStyle"], StatusArea[#, 696676]& , TagBoxNote -> 
            "696676"], 
           StyleBox["696676", {}, StripOnInput -> False]], Annotation[#, 
           Style[696676, {}], "Tooltip"]& ]}}}, {}, {}}, {}, {}, {}, {}, {
      StyleBox[{Antialiasing -> False, {
         Directive[
          Thickness[Tiny]], {
          LineBox[{{0.160136359713472, 0.}, {20.847817381548285`, 0.}}]}, 
         StyleBox[{}, {"GraphicsLabel"}, StripOnInput -> False]}, 
        StyleBox[{{
           Directive[
            Thickness[Tiny]], 
           LineBox[{{0.5578234228014154, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {0.5578234228014154, 
              0.}]}], 
           LineBox[{{20.442176577198584`, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {20.442176577198584`, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
          StyleBox[{}, {"GraphicsLabel"}, StripOnInput -> False]}, {
         "GraphicsTicks"}, StripOnInput -> False]}, {"GraphicsAxes"}, 
       StripOnInput -> False]}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0.160136359713472, 0.}, 
     CoordinatesToolOptions -> {"DisplayFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& )}, FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> Large, 
     PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {None, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{
      "\"ABRUZZO\"", "\"BASILICATA\"", "\"CALABRIA\"", "\"CAMPANIA\"", 
       "\"EMILIA-ROMAGNA\"", "\"FRIULI-VENEZIA GIULIA\"", "\"LAZIO\"", 
       "\"LIGURIA\"", "\"LOMBARDIA\"", "\"MARCHE\"", "\"MOLISE\"", 
       "\"PIEMONTE\"", "\"PUGLIA\"", "\"SARDEGNA\"", "\"SICILIA\"", 
       "\"TOSCANA\"", "\"TRENITNO-ALTO ADIGE\"", "\"UMBRIA\"", 
       "\"VALLE D'AOSTA\"", "\"VENETO\""}, "SwatchLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.24611231578947368`, 0.34267710526315787`, 
                    0.5661856315789473]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.254218052631579, 0.34900515789473685`, 
                    0.5490325263157895]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.25988857894736844`, 0.39012673684210525`, 
                    0.4578477894736842]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.26727173684210526`, 0.42872357894736846`, 
                    0.37295378947368424`]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.2815054210526316, 0.4572214736842105, 
                    0.3132227368421053]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.31119399999999997`, 0.48951342105263157`, 
                    0.26673873684210525`]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #7}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.376944, 0.5306581578947368, 0.2511645263157895]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #8}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.46028284210526316`, 0.580178052631579, 
                    0.24655178947368422`]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #9}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.570004947368421, 0.6422606842105263, 
                    0.2583812631578947]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #10}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"], 
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.6743836315789474, 0.6977730526315788, 
                    0.2746017894736842]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #11}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.7734188947368421, 0.7467151578947369, 
                    0.2952133684210526]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #12}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.8335094210526316, 0.7551613684210526, 
                    0.3108594736842105]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #13}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.8676367894736842, 0.7366103157894737, 
                    0.32319526315789476`]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #14}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.8539025789473684, 0.6528104210526315, 
                    0.3182613157894737]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #15}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.8196562631578946, 0.5410467368421052, 
                    0.3059260526315789]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #16}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.7778861578947368, 0.4010961052631579, 
                    0.2729335263157895]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #17}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[
                    0.7342351052631579, 0.2540987368421053, 
                    0.23477668421052633`]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #18}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[0.72987, 0.239399, 0.230961]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #19}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.5599999999999999]]], 
                    RGBColor[0.72987, 0.239399, 0.230961]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #20}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.15849066666666667`, 0.22681, 0.3834086666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.237736`", ",", "0.340215`", ",", "0.575113`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.237736, 0.340215, 0.575113]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.237736, 0.340215, 0.575113], Editable -> False,
                     Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.24611231578947368`, 0.34267710526315787`, 
                    0.5661856315789473], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.16407487719298247`, 0.2284514035087719, 
                    0.3774570877192982], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.24611231578947368`", ",", "0.34267710526315787`", ",", 
                    "0.5661856315789473`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.24611231578947368`, 0.34267710526315787`, 
                    0.5661856315789473]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.24611231578947368`, 0.34267710526315787`, 
                    0.5661856315789473], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.254218052631579, 0.34900515789473685`, 
                    0.5490325263157895], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.169478701754386, 0.2326701052631579, 
                    0.36602168421052633`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.254218052631579`", ",", "0.34900515789473685`", ",", 
                    "0.5490325263157895`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.254218052631579, 0.34900515789473685`, 
                    0.5490325263157895]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.254218052631579, 0.34900515789473685`, 
                    0.5490325263157895], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.25988857894736844`, 0.39012673684210525`, 
                    0.4578477894736842], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.17325905263157898`, 0.2600844912280702, 
                    0.3052318596491228], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.25988857894736844`", ",", "0.39012673684210525`", ",", 
                    "0.4578477894736842`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.25988857894736844`, 0.39012673684210525`, 
                    0.4578477894736842]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.25988857894736844`, 0.39012673684210525`, 
                    0.4578477894736842], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.26727173684210526`, 0.42872357894736846`, 
                    0.37295378947368424`], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.17818115789473685`, 0.2858157192982457, 
                    0.24863585964912283`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.26727173684210526`", ",", "0.42872357894736846`", ",", 
                    "0.37295378947368424`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.26727173684210526`, 0.42872357894736846`, 
                    0.37295378947368424`]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.26727173684210526`, 0.42872357894736846`, 
                    0.37295378947368424`], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.2815054210526316, 0.4572214736842105, 
                    0.3132227368421053], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.1876702807017544, 0.3048143157894737, 
                    0.20881515789473687`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.2815054210526316`", ",", "0.4572214736842105`", ",", 
                    "0.3132227368421053`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.2815054210526316, 0.4572214736842105, 
                    0.3132227368421053]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.2815054210526316, 0.4572214736842105, 
                    0.3132227368421053], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.31119399999999997`, 0.48951342105263157`, 
                    0.26673873684210525`], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.20746266666666666`, 0.3263422807017544, 
                    0.1778258245614035], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.31119399999999997`", ",", "0.48951342105263157`", ",", 
                    "0.26673873684210525`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.31119399999999997`, 0.48951342105263157`, 
                    0.26673873684210525`]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.31119399999999997`, 0.48951342105263157`, 
                    0.26673873684210525`], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.376944, 0.5306581578947368, 0.2511645263157895], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.251296, 0.3537721052631579, 0.16744301754385968`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.376944`", ",", "0.5306581578947368`", ",", 
                    "0.2511645263157895`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.376944, 0.5306581578947368, 0.2511645263157895]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.376944, 0.5306581578947368, 0.2511645263157895], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.46028284210526316`, 0.580178052631579, 
                    0.24655178947368422`], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.30685522807017546`, 0.38678536842105266`, 
                    0.16436785964912282`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.46028284210526316`", ",", "0.580178052631579`", ",", 
                    "0.24655178947368422`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.46028284210526316`, 0.580178052631579, 
                    0.24655178947368422`]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.46028284210526316`, 0.580178052631579, 
                    0.24655178947368422`], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.570004947368421, 0.6422606842105263, 
                    0.2583812631578947], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.380003298245614, 0.42817378947368423`, 
                    0.1722541754385965], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.570004947368421`", ",", "0.6422606842105263`", ",", 
                    "0.2583812631578947`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.570004947368421, 0.6422606842105263, 
                    0.2583812631578947]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.570004947368421, 0.6422606842105263, 
                    0.2583812631578947], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.6743836315789474, 0.6977730526315788, 
                    0.2746017894736842], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.4495890877192983, 0.46518203508771927`, 
                    0.1830678596491228], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.6743836315789474`", ",", "0.6977730526315788`", ",", 
                    "0.2746017894736842`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.6743836315789474, 0.6977730526315788, 
                    0.2746017894736842]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.6743836315789474, 0.6977730526315788, 
                    0.2746017894736842], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.7734188947368421, 0.7467151578947369, 
                    0.2952133684210526], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5156125964912281, 0.49781010526315794`, 
                    0.19680891228070174`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.7734188947368421`", ",", "0.7467151578947369`", ",", 
                    "0.2952133684210526`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7734188947368421, 0.7467151578947369, 
                    0.2952133684210526]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.7734188947368421, 0.7467151578947369, 
                    0.2952133684210526], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.8335094210526316, 0.7551613684210526, 
                    0.3108594736842105], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5556729473684211, 0.5034409122807018, 
                    0.207239649122807], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.8335094210526316`", ",", "0.7551613684210526`", ",", 
                    "0.3108594736842105`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.8335094210526316, 0.7551613684210526, 
                    0.3108594736842105]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.8335094210526316, 0.7551613684210526, 
                    0.3108594736842105], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.8676367894736842, 0.7366103157894737, 
                    0.32319526315789476`], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5784245263157894, 0.49107354385964913`, 
                    0.21546350877192985`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.8676367894736842`", ",", "0.7366103157894737`", ",", 
                    "0.32319526315789476`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.8676367894736842, 0.7366103157894737, 
                    0.32319526315789476`]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.8676367894736842, 0.7366103157894737, 
                    0.32319526315789476`], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.8539025789473684, 0.6528104210526315, 
                    0.3182613157894737], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5692683859649124, 0.435206947368421, 
                    0.2121742105263158], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.8539025789473684`", ",", "0.6528104210526315`", ",", 
                    "0.3182613157894737`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.8539025789473684, 0.6528104210526315, 
                    0.3182613157894737]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.8539025789473684, 0.6528104210526315, 
                    0.3182613157894737], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.8196562631578946, 0.5410467368421052, 
                    0.3059260526315789], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5464375087719298, 0.36069782456140353`, 
                    0.20395070175438595`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.8196562631578946`", ",", "0.5410467368421052`", ",", 
                    "0.3059260526315789`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.8196562631578946, 0.5410467368421052, 
                    0.3059260526315789]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.8196562631578946, 0.5410467368421052, 
                    0.3059260526315789], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.7778861578947368, 0.4010961052631579, 
                    0.2729335263157895], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5185907719298246, 0.26739740350877195`, 
                    0.18195568421052633`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.7778861578947368`", ",", "0.4010961052631579`", ",", 
                    "0.2729335263157895`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7778861578947368, 0.4010961052631579, 
                    0.2729335263157895]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.7778861578947368, 0.4010961052631579, 
                    0.2729335263157895], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.7342351052631579, 0.2540987368421053, 
                    0.23477668421052633`], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.48949007017543866`, 0.1693991578947369, 
                    0.15651778947368422`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.7342351052631579`", ",", "0.2540987368421053`", ",", 
                    "0.23477668421052633`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7342351052631579, 0.2540987368421053, 
                    0.23477668421052633`]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.7342351052631579, 0.2540987368421053, 
                    0.23477668421052633`], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.72987, 0.239399, 0.230961], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.48658, 0.15959933333333334`, 0.153974], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.72987`", ",", "0.239399`", ",", "0.230961`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.72987, 0.239399, 0.230961]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.72987, 0.239399, 0.230961], Editable -> False, 
                    Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5599999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.72987, 0.239399, 0.230961], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.48658, 0.15959933333333334`, 0.153974], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.72987`", ",", "0.239399`", ",", "0.230961`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.72987, 0.239399, 0.230961]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.72987, 0.239399, 0.230961], Editable -> False, 
                    Selectable -> False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, ",", #7, 
               ",", #8, ",", #9, ",", #10, ",", #11, ",", #12, ",", #13, 
               ",", #14, ",", #15, ",", #16, ",", #17, ",", #18, ",", #19, 
               ",", #20}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"{", 
                 
                 RowBox[{
                  "Automatic", ",", "Automatic", ",", "Automatic", ",", 
                   "Automatic", ",", "Automatic", ",", "Automatic", ",", 
                   "Automatic", ",", "Automatic", ",", "Automatic", ",", 
                   "Automatic", ",", "Automatic", ",", "Automatic", ",", 
                   "Automatic", ",", "Automatic", ",", "Automatic", ",", 
                   "Automatic", ",", "Automatic", ",", "Automatic", ",", 
                   "Automatic"}], "}"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.829669125747514*^9, 3.829904293615967*^9, 
  3.829913737880224*^9, 3.829915482657488*^9, 3.829915746767008*^9, 
  3.8299804234172955`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"7d5f17a0-ed76-43ec-9fce-79e984aa0332"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"luigidimaio", "=", 
  RowBox[{"PlottingCandidate", "[", 
   RowBox[{"\"\<luigi\>\"", ",", " ", "\"\<di maio\>\"", ",", 
    RowBox[{"city", "->", "\"\<pomigliano d'arco\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8299043808716125`*^9, 3.829904405483343*^9}, 
   3.8299044531381016`*^9, {3.829904806186446*^9, 3.8299048357999935`*^9}, {
   3.82990486749111*^9, 3.8299049337286716`*^9}, {3.829905038828965*^9, 
   3.8299050413445315`*^9}, 3.8299138409299736`*^9, {3.829913917524539*^9, 
   3.829913948479163*^9}, 3.82991399858916*^9, {3.829914076308519*^9, 
   3.8299140765459423`*^9}, 3.8299157262458577`*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"ed48a00f-918b-4604-9ebc-526ef35ae114"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"03 - ACERRA\"\>", ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Association[
      "InitialData" -> {
        "DI MAIO", "FALCONE", "SGARBI", "LA MARCA", "IASEVOLI", "ACUNZO", 
         "MAROTTA", "ESPOSITO", "LOFFREDO"}, "AllowEmbedding" -> True, 
       "InitialShape" -> TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`MulticolumnShape[3, 3, 9, 76.80000000000001],
          9, 3, {All}], "InitialType" -> TypeSystem`Vector[
         TypeSystem`Atom[String], 9], "Meta" -> Association[], "RowTarget" -> 
       20, "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`MulticolumnShape[3, 3, 9, 76.80000000000001],
          9, 3, {All}], "Type" -> TypeSystem`Vector[
         TypeSystem`Atom[String], 9], "Path" -> {}, "BaseIndices" -> {}, 
       "DisplayedRowCount" -> 3, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
       3, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
       "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation["DI MAIO", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
              Item[
               Pane[
                Annotation["FALCONE", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
              Item[
               Pane[
                Annotation["SGARBI", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}]}, {
              Item[
               Pane[
                Annotation["LA MARCA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
              Item[
               Pane[
                Annotation["IASEVOLI", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
              Item[
               Pane[
                Annotation["ACUNZO", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}]}, {
              Item[
               Pane[
                Annotation["MAROTTA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
              Item[
               Pane[
                Annotation["ESPOSITO", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
              Item[
               Pane[
                Annotation["LOFFREDO", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> 
            Left, Dividers -> All, FrameStyle -> 
            GrayLevel[0.7490196078431373], 
            BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
           LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
           ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           If[GeneralUtilities`$DebugMode, 
            Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
              TypeSystem`NestedGrid`PackagePrivate`formatState[
              TypeSystem`NestedGrid`PackagePrivate`$state$$, 
               TypeSystem`NestedGrid`PackagePrivate`$path$$, 
               TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
               TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{276., {50., 56.}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{276., {50., 56.}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>
       Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
        Needs["Dataset`"]; 
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Association[
      "InitialData" -> {
        "LUIGI", "ANTONIO", "VITTORIO", "GIACOMO", "VINCENZA", "GIOVANNI", 
         "GABRIELLA", "GABRIELE", "DOMENICO"}, "AllowEmbedding" -> True, 
       "InitialShape" -> TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`MulticolumnShape[3, 3, 9, 86.4], 9, 3, {
         All}], "InitialType" -> TypeSystem`Vector[
         TypeSystem`Atom[String], 9], "Meta" -> Association[], "RowTarget" -> 
       20, "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`MulticolumnShape[3, 3, 9, 86.4], 9, 3, {
         All}], "Type" -> TypeSystem`Vector[
         TypeSystem`Atom[String], 9], "Path" -> {}, "BaseIndices" -> {}, 
       "DisplayedRowCount" -> 3, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
       3, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
       "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation["LUIGI", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
              Item[
               Pane[
                Annotation["ANTONIO", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
              Item[
               Pane[
                Annotation["VITTORIO", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}]}, {
              Item[
               Pane[
                Annotation["GIACOMO", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
              Item[
               Pane[
                Annotation["VINCENZA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
              Item[
               Pane[
                Annotation["GIOVANNI", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}]}, {
              Item[
               Pane[
                Annotation["GABRIELLA", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
              Item[
               Pane[
                Annotation["GABRIELE", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
              Item[
               Pane[
                Annotation["DOMENICO", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}, Frame -> {{
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                  Directive[
                   Dashing[{0, Small}], 
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> 
            Left, Dividers -> All, FrameStyle -> 
            GrayLevel[0.7490196078431373], 
            BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
           LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
           ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           If[GeneralUtilities`$DebugMode, 
            Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
              TypeSystem`NestedGrid`PackagePrivate`formatState[
              TypeSystem`NestedGrid`PackagePrivate`$state$$, 
               TypeSystem`NestedGrid`PackagePrivate`$path$$, 
               TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
               TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{306., {50., 56.}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{306., {50., 56.}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>
       Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
        Needs["Dataset`"]; 
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Association[
      "InitialData" -> {751, 84, 75, 36, 34, 5, 3, 3, 1}, "AllowEmbedding" -> 
       True, "InitialShape" -> TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`MulticolumnShape[1, 9, 9, 34], 9, 9, {All}], 
       "InitialType" -> TypeSystem`Vector[
         TypeSystem`Atom[Integer], 9], "Meta" -> Association[], "RowTarget" -> 
       20, "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`MulticolumnShape[1, 9, 9, 34], 9, 9, {All}], 
       "Type" -> TypeSystem`Vector[
         TypeSystem`Atom[Integer], 9], "Path" -> {}, "BaseIndices" -> {}, 
       "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 9, "DataRowCount" -> 
       1, "DataColumnCount" -> 9, "SortPaths" -> {}, "SortDirections" -> {}, 
       "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 RawBoxes["751"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["84"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["75"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["36"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["34"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> 
            Left, Dividers -> All, FrameStyle -> 
            GrayLevel[0.7490196078431373], 
            BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
           LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
           ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           If[GeneralUtilities`$DebugMode, 
            Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
              TypeSystem`NestedGrid`PackagePrivate`formatState[
              TypeSystem`NestedGrid`PackagePrivate`$state$$, 
               TypeSystem`NestedGrid`PackagePrivate`$path$$, 
               TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
               TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{399., {27., 33.}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{399., {27., 33.}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>
       Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
        Needs["Dataset`"]; 
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.829915726890604*^9, 3.829980423892296*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"47d13ef8-27b2-4695-b362-05451d6c3e79"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"notfound", " ", "=", " ", 
  RowBox[{"PlottingCandidate", "[", 
   RowBox[{"\"\<tommaso\>\"", ",", "\"\<azzalin\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8299137449506445`*^9, 3.8299137952275095`*^9}, 
   3.8299138428000636`*^9, {3.829913965363909*^9, 3.8299140009592752`*^9}, 
   3.8299157290558753`*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"d9996d02-5fdb-4251-b316-bea294411fb7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"NOT FOUND\"\>", ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Association[
      "InitialData" -> {}, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`UnknownShape[False]], 0, 
         DirectedInfinity[1], {}], "InitialType" -> 
       TypeSystem`Vector[TypeSystem`UnknownType, 0], "Meta" -> Association[], 
       "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`UnknownShape[False]], 0, 
         DirectedInfinity[1], {}], "Type" -> 
       TypeSystem`Vector[TypeSystem`UnknownType, 0], "Path" -> {}, 
       "BaseIndices" -> {}, "DisplayedRowCount" -> 0, "DisplayedColumnCount" -> 
       1, "DataRowCount" -> 0, "DataColumnCount" -> 1, "SortPaths" -> {}, 
       "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[
                    Spacer[10], 
                    GrayLevel[0.5]], 
                    Style[
                    Style[
                    Spacer[10], 
                    GrayLevel[0.5]], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{}, 
                    4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{}, 
                  "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}],
                BaseStyle -> {
                 GrayLevel[0.5], 8}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> 
            Left, Dividers -> All, FrameStyle -> 
            GrayLevel[0.7490196078431373], 
            BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
           LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
           ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           If[GeneralUtilities`$DebugMode, 
            Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
              TypeSystem`NestedGrid`PackagePrivate`formatState[
              TypeSystem`NestedGrid`PackagePrivate`$state$$, 
               TypeSystem`NestedGrid`PackagePrivate`$path$$, 
               TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
               TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{39., {21., 27.}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{39., {21., 27.}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>
       Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
        Needs["Dataset`"]; 
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Association[
      "InitialData" -> {}, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`UnknownShape[False]], 0, 
         DirectedInfinity[1], {}], "InitialType" -> 
       TypeSystem`Vector[TypeSystem`UnknownType, 0], "Meta" -> Association[], 
       "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`UnknownShape[False]], 0, 
         DirectedInfinity[1], {}], "Type" -> 
       TypeSystem`Vector[TypeSystem`UnknownType, 0], "Path" -> {}, 
       "BaseIndices" -> {}, "DisplayedRowCount" -> 0, "DisplayedColumnCount" -> 
       1, "DataRowCount" -> 0, "DataColumnCount" -> 1, "SortPaths" -> {}, 
       "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[
                    Spacer[10], 
                    GrayLevel[0.5]], 
                    Style[
                    Style[
                    Spacer[10], 
                    GrayLevel[0.5]], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{}, 
                    4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{}, 
                  "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}],
                BaseStyle -> {
                 GrayLevel[0.5], 8}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> 
            Left, Dividers -> All, FrameStyle -> 
            GrayLevel[0.7490196078431373], 
            BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
           LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
           ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           If[GeneralUtilities`$DebugMode, 
            Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
              TypeSystem`NestedGrid`PackagePrivate`formatState[
              TypeSystem`NestedGrid`PackagePrivate`$state$$, 
               TypeSystem`NestedGrid`PackagePrivate`$path$$, 
               TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
               TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{39., {21., 27.}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{39., {21., 27.}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>
       Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
        Needs["Dataset`"]; 
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Association[
      "InitialData" -> {}, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`UnknownShape[False]], 0, 
         DirectedInfinity[1], {}], "InitialType" -> 
       TypeSystem`Vector[TypeSystem`UnknownType, 0], "Meta" -> Association[], 
       "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`UnknownShape[False]], 0, 
         DirectedInfinity[1], {}], "Type" -> 
       TypeSystem`Vector[TypeSystem`UnknownType, 0], "Path" -> {}, 
       "BaseIndices" -> {}, "DisplayedRowCount" -> 0, "DisplayedColumnCount" -> 
       1, "DataRowCount" -> 0, "DataColumnCount" -> 1, "SortPaths" -> {}, 
       "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[
                    Spacer[10], 
                    GrayLevel[0.5]], 
                    Style[
                    Style[
                    Spacer[10], 
                    GrayLevel[0.5]], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{}, 
                    4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{}, 
                  "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}],
                BaseStyle -> {
                 GrayLevel[0.5], 8}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> 
            Left, Dividers -> All, FrameStyle -> 
            GrayLevel[0.7490196078431373], 
            BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
           LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
           ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           If[GeneralUtilities`$DebugMode, 
            Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
              TypeSystem`NestedGrid`PackagePrivate`formatState[
              TypeSystem`NestedGrid`PackagePrivate`$state$$, 
               TypeSystem`NestedGrid`PackagePrivate`$path$$, 
               TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
               TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{39., {21., 27.}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{39., {21., 27.}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>
       Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
        Needs["Dataset`"]; 
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.8299157297557487`*^9, 3.829980424498306*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"949f3968-621d-44c6-b7ef-d3dbd1942790"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\"\<CAMERA\>\"", " ", "===", " ", 
  RowBox[{"ToUpperCase", "[", "\"\<camera\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.8299127994860334`*^9, 3.829912811318892*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"54ab3e21-27e7-4339-a014-37b1dabff2f3"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.829912811715746*^9, 3.8299140849178333`*^9, 
  3.8299146388698287`*^9, 3.8299152376368947`*^9, 3.8299154833574734`*^9, 
  3.8299804248006253`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"dd570db8-58c8-4646-a46e-c921c1b4f27e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"notfound", "[", 
    RowBox[{"[", "4", "]"}], "]"}], ",", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"notfound", "[", 
     RowBox[{"[", "2", "]"}], "]"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", "\"\<DarkRainbow\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8299156754921093`*^9, 3.8299156937290983`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"96ab722f-37f8-4862-8cac-55bf073b20ba"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{-1.70721048798252, 0.}, {2.8048069919883467`, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.7], 
     Thickness[Small]}]}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], 
       LineBox[{{-1.70721048798252, 0.}, {3.8699271667880555`, 0.}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.5487982520029133, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 0.}]}],
          LineBox[{{1.5487982520029133`, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {1.5487982520029133`, 
            0.}]}], {{}, {}, {}}}, 
        StyleBox[{}, "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{-1.70721048798252, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{{3.829915694499608*^9, 3.829915713699716*^9}, 
   3.8299804248643107`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"1d8d7dbe-601b-46e3-8e04-4a78b4e6dfad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"luigidimaio", "[", 
    RowBox[{"[", "4", "]"}], "]"}], ",", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"luigidimaio", "[", 
     RowBox[{"[", "2", "]"}], "]"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", "\"\<DarkRainbow\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8299140082979937`*^9, 3.829914062071093*^9}, {
  3.8299140929419737`*^9, 3.82991409913706*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"6c6fe4e6-9bc0-48dd-9ada-3099c39f336f"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      Opacity[0], 
      PointBox[{{0.3707501820830299, 0.}, {9.451201747997086, 0.}}]}, {{}, {
       Directive[
        EdgeForm[
         Directive[
          Thickness[Small], 
          Opacity[0.637]]], 
        RGBColor[0.982864, 0.7431472, 0.3262672]], {{
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.237736, 0.340215, 0.575113]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                751.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
            StatusArea[#, 751]& , TagBoxNote -> "751"], 
           StyleBox["751", {}, StripOnInput -> False]], Annotation[#, 
           Style[751, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.25634450000000003`, 0.36442575, 0.5148382499999999]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                84.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
            StatusArea[#, 84]& , TagBoxNote -> "84"], 
           StyleBox["84", {}, StripOnInput -> False]], Annotation[#, 
           Style[84, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.277947, 0.45009699999999997`, 0.32815550000000004`]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
                75.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
            StatusArea[#, 75]& , TagBoxNote -> "75"], 
           StyleBox["75", {}, StripOnInput -> False]], Annotation[#, 
           Style[75, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.38516275, 0.53580125, 0.24921775000000002`]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
                36.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
            StatusArea[#, 36]& , TagBoxNote -> "36"], 
           StyleBox["36", {}, StripOnInput -> False]], Annotation[#, 
           Style[36, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.624866, 0.673302, 0.264296]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 34.},
                 "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
            StatusArea[#, 34]& , TagBoxNote -> "34"], 
           StyleBox["34", {}, StripOnInput -> False]], Annotation[#, 
           Style[34, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.8292435, 0.75748025, 0.3093175]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 5.}, 
                "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
            StatusArea[#, 5]& , TagBoxNote -> "5"], 
           StyleBox["5", {}, StripOnInput -> False]], Annotation[#, 
           Style[5, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.8453409999999999, 0.6248695, 0.3151775]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 3.}, 
                "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
            StatusArea[#, 3]& , TagBoxNote -> "3"], 
           StyleBox["3", {}, StripOnInput -> False]], Annotation[#, 
           Style[3, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.75060425, 0.30922275000000005`, 0.24908550000000002`]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{7.548798252002913, 0.}, {8.451201747997086, 3.}, 
                "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
            StatusArea[#, 3]& , TagBoxNote -> "3"], 
           StyleBox["3", {}, StripOnInput -> False]], Annotation[#, 
           Style[3, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.72987, 0.239399, 0.230961]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{8.548798252002912, 0.}, {9.451201747997086, 1.}, 
                "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
            StatusArea[#, 1]& , TagBoxNote -> "1"], 
           StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
           Style[1, {}], "Tooltip"]& ]}}}, {}, {}}, {}, {}, {}, {}, {
      StyleBox[{Antialiasing -> False, {
         Directive[
          Thickness[Tiny]], {
          LineBox[{{0.3707501820830299, 0.}, {9.632810779315367, 0.}}]}, 
         StyleBox[{}, {"GraphicsLabel"}, StripOnInput -> False]}, 
        StyleBox[{{
           Directive[
            Thickness[Tiny]], 
           LineBox[{{0.5487982520029133, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
              0.}]}], 
           LineBox[{{9.451201747997086, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {9.451201747997086, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
          StyleBox[{}, {"GraphicsLabel"}, StripOnInput -> False]}, {
         "GraphicsTicks"}, StripOnInput -> False]}, {"GraphicsAxes"}, 
       StripOnInput -> False]}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0.3707501820830299, 0.}, 
     CoordinatesToolOptions -> {"DisplayFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& )}, FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> Large, 
     PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {None, Automatic}}], 
   FormBox[
    FormBox[
     TagBox[
      TagBox[
       DynamicModuleBox[{
        TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
         Association[
          "InitialData" -> {
            "DI MAIO", "FALCONE", "SGARBI", "LA MARCA", "IASEVOLI", "ACUNZO", 
             "MAROTTA", "ESPOSITO", "LOFFREDO"}, "AllowEmbedding" -> True, 
           "InitialShape" -> TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`MulticolumnShape[
             3, 3, 9, 76.80000000000001], 9, 3, {All}], "InitialType" -> 
           TypeSystem`Vector[
             TypeSystem`Atom[String], 9], "Meta" -> Association[], 
           "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
           TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`MulticolumnShape[
             3, 3, 9, 76.80000000000001], 9, 3, {All}], "Type" -> 
           TypeSystem`Vector[
             TypeSystem`Atom[String], 9], "Path" -> {}, "BaseIndices" -> {}, 
           "DisplayedRowCount" -> 3, "DisplayedColumnCount" -> 3, 
           "DataRowCount" -> 3, "DataColumnCount" -> 3, "SortPaths" -> {}, 
           "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
           1], TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
         TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
         TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
         DynamicModule[{
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
              Style[
               Grid[{{
                  Item[
                   Pane[
                    Annotation["DI MAIO", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                   ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
                  Item[
                   Pane[
                    Annotation["FALCONE", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                   ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
                  Item[
                   Pane[
                    Annotation["SGARBI", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                   ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}]}, {
                  Item[
                   Pane[
                    Annotation["LA MARCA", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                   ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
                  Item[
                   Pane[
                    Annotation["IASEVOLI", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                   ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
                  Item[
                   Pane[
                    Annotation["ACUNZO", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                   ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}]}, {
                  Item[
                   Pane[
                    Annotation["MAROTTA", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                   ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
                  Item[
                   Pane[
                    Annotation["ESPOSITO", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                   ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}], 
                  Item[
                   Pane[
                    Annotation["LOFFREDO", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{76.80000000000001, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                   ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]}, Inherited}]}}, 
                BaseStyle -> {
                 ContextMenu -> 
                  Dynamic[
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                  "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> 
                Left, Dividers -> All, FrameStyle -> 
                GrayLevel[0.7490196078431373], 
                BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
               LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
               False, ShowAutoStyles -> False]], 
            TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
           Dynamic[
            TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
               Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
               
               Module[{
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                 TypeSystem`NestedGrid`PackagePrivate`datasetData[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                   FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                   TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                   TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                   TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                  Not[
                   FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                  TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                  TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
             TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
               TypeSystem`SparseGrid[
                TypeSystem`H["(data no longer present)"]], 
               If[GeneralUtilities`$DebugMode, 
                Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                  TypeSystem`NestedGrid`PackagePrivate`formatState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
            TrackedSymbols :> {
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
           DynamicModuleValues :> {}], 
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
           TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
            TypeSystem`PackageScope`SubViewPathbar[
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`updateState[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
           TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
           Framed[
            Dynamic[
             Replace[
             TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
              TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
                 Blank[]] -> "", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                 TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                  Blank[]], 
                 Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                  Blank[]], 
                 Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                  Blank[]]] :> (
                Increment[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
                TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                 TypeSystem`NestedGrid`PackagePrivate`path$; 
                TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
                 TypeSystem`NestedGrid`PackagePrivate`pathType$; 
                TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
                 TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
                TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
                 TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
                TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                 TypeSystem`NestedGrid`PackagePrivate`path$, 
                  TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
               Null :> Spacer[10], Blank[] :> Spacer[10]}], 
             TrackedSymbols :> {
              TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
            FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, 
            Alignment -> Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
        DynamicWrapperBox[
         DynamicBox[
          ToBoxes[
           Dataset`DatasetContent[
           2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
            "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
            "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
            "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
            "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
            "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
            "BottomBar" -> 
            Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
            "OutputID" -> Hold[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
           StandardForm], ImageSizeCache -> {276., {50., 56.}}, 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
         MouseAnnotation[], ImageSizeCache -> {276., {50., 56.}}], 
        BaseStyle -> {LineBreakWithin -> False}, DynamicModuleValues :> {}, 
        Initialization :> 
        Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
          Needs["Dataset`"]; 
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]], 
        UnsavedVariables :> {
         TypeSystem`NestedGrid`PackagePrivate`$outputID$$}], Deploy, 
       DefaultBaseStyle -> "Deploy"], 
      Dataset`InterpretDataset[1], Editable -> False, SelectWithContents -> 
      True, Selectable -> False], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.8299140630018034`*^9, 3.8299141001732044`*^9}, 
   3.8299154842324495`*^9, 3.8299156106469545`*^9, 3.829915711627757*^9, 
   3.829980424965315*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"d10356ee-1043-42cc-85ca-6f0b13edc2ba"]
}, Open  ]]
},
WindowSize->{1920, 997},
WindowMargins->{{1912, Automatic}, {Automatic, -8}},
TaggingRules->{
 "WelcomeScreenSettings" -> {"FEStarting" -> True}, "TryRealOnly" -> False},
Magnification:>1. Inherited,
FrontEndVersion->"12.2 for Microsoft Windows (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"a396fccb-b295-45c6-b122-6913c6bc0949"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 594, 11, 48, "Input",ExpressionUUID->"8d1a8825-42b2-4663-9e53-b0643a0d2112"],
Cell[CellGroupData[{
Cell[1177, 35, 971, 17, 28, "Input",ExpressionUUID->"d7a8c431-630c-45af-85ce-8fbc6eafa9ee"],
Cell[2151, 54, 20677, 427, 379, "Output",ExpressionUUID->"4d7d0be0-aab9-46d4-9c44-b0dcce605fcc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22865, 486, 629, 13, 28, "Input",ExpressionUUID->"12ecc51f-5245-402c-b360-ef9ef788b727"],
Cell[23497, 501, 19911, 412, 379, "Output",ExpressionUUID->"91bc5b9b-01fb-4281-b26a-5131ac051aa2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43445, 918, 607, 13, 28, "Input",ExpressionUUID->"08e8659e-aa84-4fae-95ee-9d4f802ba7f4"],
Cell[44055, 933, 36955, 764, 379, "Output",ExpressionUUID->"548a94da-c56d-4c3c-9355-ed4c9f5abbfd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81047, 1702, 1944, 47, 86, "Input",ExpressionUUID->"3723de93-b25b-4dc5-9298-e670f78bb1e5"],
Cell[82994, 1751, 20392, 315, 35, "Message",ExpressionUUID->"d129f41e-4dfa-4d7c-b612-46d93e241800"],
Cell[103389, 2068, 27722, 619, 314, "Output",ExpressionUUID->"3de6d058-10ee-452d-82f8-1f7eba26026a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[131148, 2692, 491, 9, 28, "Input",ExpressionUUID->"cddb242c-561a-4833-981a-279018e61cef"],
Cell[131642, 2703, 100078, 2138, 355, "Output",ExpressionUUID->"7d5f17a0-ed76-43ec-9fce-79e984aa0332"]
}, Open  ]],
Cell[CellGroupData[{
Cell[231757, 4846, 718, 11, 28, "Input",ExpressionUUID->"ed48a00f-918b-4604-9ebc-526ef35ae114"],
Cell[232478, 4859, 82042, 1505, 125, "Output",ExpressionUUID->"47d13ef8-27b2-4695-b362-05451d6c3e79"]
}, Open  ]],
Cell[CellGroupData[{
Cell[314557, 6369, 415, 7, 28, "Input",ExpressionUUID->"d9996d02-5fdb-4251-b316-bea294411fb7"],
Cell[314975, 6378, 66011, 1156, 67, "Output",ExpressionUUID->"949f3968-621d-44c6-b7ef-d3dbd1942790"]
}, Open  ]],
Cell[CellGroupData[{
Cell[381023, 7539, 272, 4, 28, "Input",ExpressionUUID->"54ab3e21-27e7-4339-a014-37b1dabff2f3"],
Cell[381298, 7545, 278, 4, 32, "Output",ExpressionUUID->"dd570db8-58c8-4646-a46e-c921c1b4f27e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[381613, 7554, 517, 11, 28, "Input",ExpressionUUID->"96ab722f-37f8-4862-8cac-55bf073b20ba"],
Cell[382133, 7567, 1929, 53, 366, "Output",ExpressionUUID->"1d8d7dbe-601b-46e3-8e04-4a78b4e6dfad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[384099, 7625, 571, 12, 28, "Input",ExpressionUUID->"6c6fe4e6-9bc0-48dd-9ada-3099c39f336f"],
Cell[384673, 7639, 40377, 808, 370, "Output",ExpressionUUID->"d10356ee-1043-42cc-85ca-6f0b13edc2ba"]
}, Open  ]]
}
]
*)

